// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    username,
    phone_number,
    password,
    role,
    is_verified
) VALUES (
             $1, $2, $3, $4, $5, $6
         ) RETURNING id, email, username, phone_number, password, role, is_verified, created_at, reset_token, reset_token_expiry
`

type CreateUserParams struct {
	Email       string      `json:"email"`
	Username    string      `json:"username"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Password    string      `json:"password"`
	Role        string      `json:"role"`
	IsVerified  pgtype.Bool `json:"is_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.PhoneNumber,
		arg.Password,
		arg.Role,
		arg.IsVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiry,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, phone_number, password, role, is_verified, created_at, reset_token, reset_token_expiry FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiry,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, phone_number, password, role, is_verified, created_at, reset_token, reset_token_expiry FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiry,
	)
	return i, err
}

const getUserByResetToken = `-- name: GetUserByResetToken :one
SELECT id, email, username, phone_number, password, role, is_verified, created_at
FROM users
WHERE reset_token = $1 AND reset_token_expiry > NOW()
`

type GetUserByResetTokenRow struct {
	ID          int32              `json:"id"`
	Email       string             `json:"email"`
	Username    string             `json:"username"`
	PhoneNumber pgtype.Text        `json:"phone_number"`
	Password    string             `json:"password"`
	Role        string             `json:"role"`
	IsVerified  pgtype.Bool        `json:"is_verified"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetUserByResetToken(ctx context.Context, resetToken pgtype.Text) (GetUserByResetTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserByResetToken, resetToken)
	var i GetUserByResetTokenRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.IsVerified,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, username, phone_number, password, role, is_verified, created_at, reset_token, reset_token_expiry FROM users
ORDER BY id
    LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PhoneNumber,
			&i.Password,
			&i.Role,
			&i.IsVerified,
			&i.CreatedAt,
			&i.ResetToken,
			&i.ResetTokenExpiry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetPassword = `-- name: ResetPassword :exec
UPDATE users
SET
    password = $1,
    reset_token = NULL,
    reset_token_expiry = NULL,
    is_verified = CASE
                      WHEN is_verified = false THEN true
                      ELSE is_verified
        END
WHERE reset_token = $2
  AND reset_token_expiry > NOW() AND email = $3
`

type ResetPasswordParams struct {
	Password   string      `json:"password"`
	ResetToken pgtype.Text `json:"reset_token"`
	Email      string      `json:"email"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) error {
	_, err := q.db.Exec(ctx, resetPassword, arg.Password, arg.ResetToken, arg.Email)
	return err
}

const updateResetToken = `-- name: UpdateResetToken :exec
UPDATE users
SET reset_token = $1, reset_token_expiry = $2
WHERE email = $3
`

type UpdateResetTokenParams struct {
	ResetToken       pgtype.Text        `json:"reset_token"`
	ResetTokenExpiry pgtype.Timestamptz `json:"reset_token_expiry"`
	Email            string             `json:"email"`
}

func (q *Queries) UpdateResetToken(ctx context.Context, arg UpdateResetTokenParams) error {
	_, err := q.db.Exec(ctx, updateResetToken, arg.ResetToken, arg.ResetTokenExpiry, arg.Email)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2
WHERE id = $1
    RETURNING id, email, username, phone_number, password, role, is_verified, created_at, reset_token, reset_token_expiry
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.Password,
		&i.Role,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ResetToken,
		&i.ResetTokenExpiry,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users SET is_verified = true WHERE email = $1
`

func (q *Queries) VerifyUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, verifyUser, email)
	return err
}
